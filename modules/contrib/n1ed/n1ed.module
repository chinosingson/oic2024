<?php

/**
 * @file
 * Main code for N1ED module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Returns an array with N1ED plugin definition.
 */
function n1ed_plugin() {
  return [
    'n1ed' => [
      'name' => 'N1ED',
      'desc' => t('N1ED. See <a href=":addon_page_url">@addon_page_title</a> for more details.',
        [
          ':addon_page_url' => 'https://n1ed.com',
          '@addon_page_title' => t('addon page'),
        ]),
      'path' => base_path() . 'libraries/N1ED',
    ],
  ];
}

/**
 * Changing CKEditor configuration.
 */
function n1ed_editor_js_settings_alter(&$settings) {
  foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
    if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor') {

      // Adding CKEditor skin "n1theme"
      $settings['editor']['formats'][$text_format_id]['editorSettings']['skin'] = 'n1theme,' . \Drupal::request()->getBaseUrl() . '/' . \Drupal::service('extension.list.module')->getPath('n1ed') . "/js/skin/n1theme/";

      if (
        !isset($settings['editor']['formats'][$text_format_id]['editorSettings']['enableN1EDEcoSystem']) ||
        $settings['editor']['formats'][$text_format_id]['editorSettings']['enableN1EDEcoSystem'] == 'false'
      ) {
        if (isset($settings['N1EDFreeFormat']) && $settings['N1EDFreeFormat'] == FALSE) {
          $settings['N1EDFreeFormat'] = $text_format_id;
        }
      }
    } else if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor5') {

      if (
        !isset($settings['editor']['formats'][$text_format_id]['editorSettings']['enableN1EDEcoSystem']) ||
        $settings['editor']['formats'][$text_format_id]['editorSettings']['enableN1EDEcoSystem'] == 'false'
      ) {

        if (isset($settings['N1EDFreeFormat']) && $settings['N1EDFreeFormat'] == FALSE) {
          $settings['N1EDFreeFormat'] = $text_format_id;
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_form_alter(),
 * needed for compatibility with Drupal < 10.
 *
 * Alters widget forms that have Flmngr enabled.
 */
function n1ed_field_widget_form_alter(&$element, $form_state, $context) {
  n1ed_field_widget_single_element_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Alters widget forms that have Flmngr enabled.
 */
function n1ed_field_widget_single_element_form_alter(&$element, $form_state, $context) {
  if (
    \Drupal::currentUser()->hasPermission('administer flmngr files') &&
    \Drupal::config('n1ed.settings')->get('useFlmngrOnFileFields')
  ) {
    $widgets = ['image_image', 'file_generic'];
    if (in_array($context['widget']->getPluginId(), $widgets)) {
      $class = 'Drupal\n1ed\N1edFileField';
      $element['#process'][] = [$class, 'processWidget'];
    }
  }
}

/**
 * Implements hook_entity_display_build_alter().
 */
function n1ed_entity_display_build_alter(&$build, $context) {
  if (
    \Drupal::currentUser()->hasPermission('administer flmngr files') &&
    \Drupal::config('n1ed.settings')->get('useFlmngrOnFileFields')
  ) {
    foreach ($build as $field_name => $field) {
      if (!empty($field['#field_type']) && $field['#field_type'] === 'comment') {
        $build[$field_name]['#attached']['library'][] = 'n1ed/drupal.n1ed.filefield';
        n1ed_form_alter($build[$field_name]);
      }
    }
  }
}


/**
 * Returns N1ED API key
 */
function n1ed_get_api_key($editor_title) {
  $api_key = \Drupal::config('n1ed.settings')->get('apikey') ?: NULL;
  if ($api_key == NULL) {
    if (n1ed_get_integration_type($editor_title) === 'flmngr')
      $api_key = 'FLMNFLMN';
    else
      $api_key = 'N1D824RR';
  }
  return $api_key;
}

function n1ed_get_files_url_path() {
  return parse_url(
    function_exists('file_create_url') ?
      file_create_url('public://flmngr') :
      \Drupal::service('file_url_generator')->generateAbsoluteString('public://flmngr')
  )['path'];
}

/**
 * Pass API key for N1ED widgets outside of CKEditor
 */
function n1ed_form_alter(&$form) {
  // Fix for: https://www.drupal.org/project/n1ed/issues/3290918
  if (isset($form['#attached'])) {
    if(empty($form['#attached']['drupalSettings'])){
      $form['#attached']['drupalSettings'] = [];
    }
    $form['#attached']['drupalSettings']['n1ed'] = [
      'apiKey' => n1ed_get_api_key("CKEditor"), // using default editor
      'Flmngr' => [
        'urlFileManager' => Url::fromRoute(
          \Drupal::config('n1ed.settings')->get('useLegacyFlmngrBackend') != 1 ? 'n1ed.flmngr' : 'n1ed.flmngrLegacy'
        )->toString(),
        'urlFiles' => n1ed_get_files_url_path()
      ]
    ];
  }
}

$n1ed_cached_integration_type = NULL;
/**
 * Returns a machine name of current integration type.
 */
function n1ed_get_integration_type($editor_title) {
  if ($editor_title == "CKEditor 5")
    return 'flmngr';

  global $n1ed_cached_integration_type;
  if ($n1ed_cached_integration_type !== NULL)
      return $n1ed_cached_integration_type;

  // Do not use n1ed_get_api_key() to avoid recursive call
  $api_key = \Drupal::config('n1ed.settings')->get('apikey') ?: NULL;

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL,"https://cloud.n1ed.com/api/v1/conf/get-integration-type");
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(array('apiKey' => $api_key)));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_TIMEOUT,3000);
  $json = curl_exec($ch);
  $isError = curl_getinfo($ch, CURLINFO_HTTP_CODE) !== 200;
  curl_close($ch);

  $config = \Drupal::service('config.factory')->getEditable('n1ed.settings');
  if (!$isError) {
      $json = json_decode($json);
      if (!(isset($json->data)) || (isset($json->error) && $json->error !== NULL))
          $isError = TRUE;
  }
  if (!$isError) {
      $n1ed_cached_integration_type = $json->data;
      $config->set('integrationType', $n1ed_cached_integration_type);
      $config->save(TRUE);
      return $n1ed_cached_integration_type;
  }
  return $config->get('integrationType') ?: 'n1ed';
}

/**
 * Returns a title of current integration type.
 */
function n1ed_get_integration_type_title($editor_title) {
  switch (n1ed_get_integration_type($editor_title)) {
    case 'flmngr':
      return 'Flmngr';

    case 'txt42':
      return 'Txt42';

    default:
      return 'N1ED';
  }
}

function n1ed_get_integration_type_title_gradient($editor_title) {

  switch (n1ed_get_integration_type($editor_title)) {
    case 'flmngr':
      return 'background: rgb(255 101 0); background: linear-gradient(90deg, rgb(255 101 0) 0%, rgb(255 158 13) 100%);';

    case 'txt42':
      return 'background: #6deaf7; background: linear-gradient(180deg, rgba(125,239,220,1) 0%, rgba(55,230,255,1) 100%);';

    default:
      return 'background: #3dcad7; background: linear-gradient(180deg, rgba(85,219,199,1) 0%, rgba(35,182,232,1) 100%);';
  }

}

/**
 * Adds "N1ED" badges to affected text formats in the list.
 */
function n1ed_form_filter_admin_overview_alter(&$form, $form_state) {
  // Then splice in the name of each text editor for each text format.
  $editors = \Drupal::service('plugin.manager.editor')->getDefinitions();
  foreach (Element::children($form['formats']) as $format_id) {
    $editor = editor_load($format_id);
    $editor_name = ($editor && isset($editors[$editor->getEditor()])) ? $editors[$editor->getEditor()]['label'] : 'â€”';

    $htmlN1ED = "";
    if ($editor != NULL) {
      $settings = $editor->getSettings();

      if ($editor_name == "CKEditor 5") {
        $isN1EDEnabled = isset($settings["plugins"]["n1ed_flmngr_ckeditor5"]["enableN1EDEcoSystem"]) && $settings["plugins"]["n1ed_flmngr_ckeditor5"]["enableN1EDEcoSystem"] == "true";
      } else {
        $isN1EDEnabled = isset($settings["plugins"]["N1ED-editor"]["enableN1EDEcoSystem"]) && $settings["plugins"]["N1ED-editor"]["enableN1EDEcoSystem"] == 'true';
      }


      if ($isN1EDEnabled) {
        $htmlN1ED = "<div style='display: inline-block;margin-left:10px;" . n1ed_get_integration_type_title_gradient($editor_name) . "border-radius: 2px;padding:1px 5px;color:white;font-weight: bold' title='" . n1ed_get_integration_type_title($editor_name) . " is enabled'>" . n1ed_get_integration_type_title($editor_name) . "</div>";
      }
    }

    $editor_column['editor'] = [
      '#type' => 'inline_template',
      '#template' => $editor_name . $htmlN1ED,
    ];

    $form['formats'][$format_id]["0"] = $editor_column;
  }
}

/**
 * Implements hook_help().
 */
function n1ed_help($path, $arg) {
  switch ($path) {
    case "help.page.n1ed":
      return "

                <h3>" . t("About N1ED") . "</h3>

                <p>" . t('<a href=":website">N1ED add-on for CKEditor</a> adds a lot of features to your editor. N1ED is a multi-add-on meaning it will connect different plugins from N1ED Ecosystem which you specify in the preferences.', [":website" => "https://n1ed.com"]) . "</p>

                <h3>" . t('Installation') . "</h3>

                <p>" . t('The installation process is typical for Drupal - just install N1ED module (using Composer or archive), all dependencies will be linked automatically. Also this module will attach to those Text Formats</a> which have CKEditor and are fine to be used by article editors. For example it will attach to "Full format" and will not to "Plain text" or "Basic HTML"') . "</p>


                <h3>" . t('Configuration') . "</h3>

                <p>" . t('Acting as standard CKEditor Drupal submodule N1ED will be enabled in those Text Formats which have CKEditor and where N1ED is not disabled. Go to the <a href=":formats">Text Formats page</a> and you can see the badge "N1ED" near formats N1ED is marked enabled in. Go into text format to configure N1ED there by clicking "Configure" button.', [":formats" => Url::fromRoute('filter.admin_overview')->toString()]) . "</p>

                <p>" . t('When you are on some text format page, first you need to set you N1ED API key once. N1ED configuration widget will lead you through this simple process and attach existing N1ED account or register a new one for free. Your default API key is demo key, and it is also workable but does not have access to some online services, so we recommend you to change it first of all.') . "</p>

                <p>" . t('Why do you need to link an account? It is easy: because your API key is a reference to your configuration. N1ED will be auto updated using CDN, also cloud of N1ED provides some services like getting screenshots of custom blocks you define, storing configurations and sharing them between your different websites if required, fast switching configurations, and more services in future versions.') . "</p>

                <p>" . t('Then you can enable or disable N1ED for each text format independently. It is recommended to use N1ED in text formats available for administrator/articles editor users and disable for restricted formats which used in comments form or somewhere like it.') . "</p>


                <h3>" . t('Editing an articles') . "</h3>

                <p>" . t('You will go to the article page as before and edit your content with CKEditor powered with N1ED, Bootstrap Editor, File Manager, Image Editor and other currently available and available in future plugins for CKEditor which are published inside <a href=":plugins">N1ED Ecosystem</a>.', [":plugins" => "https://n1ed.com/plugins"]) . "</p>


                <h3>" . t('Troubleshooting') . "</h3>

                <p>" . t('If you do not see these features on your CKEditor, please be sure you chose appropriate Text Format (which has N1ED attached). In some cases your default text format can be "Basic HTML" which may require to switch fo "Full HMTL" in the Drupal combobox right under CKEditor area.') . "</p>

                <p>" . t('In case of any problems please check <a href=":docs">documentation</a> or <a href=":support">ask support via e-mail</a>.', [
                  ":docs" => "https://n1ed.com/docs",
                  ":support" => "mailto:support@helpdesk.edsdk.com",
                ]) . "</p>

            ";
  }

}

/**
 * Implements hook_library_info_alter().
 */
function n1ed_library_info_alter(&$libraries, $extension) {
  if ($extension === 'ckeditor' && isset($libraries['drupal.ckeditor'])) {
    $libraries['drupal.ckeditor']['dependencies'][] = 'n1ed/n1ed.loading';
  }
}
